apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "common.names.name" . }}
  namespace: {{ template "common.names.namespace" . }}
  labels:
  {{- include "common.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "common.names.name" . }}
      app.kubernetes.io/component: keycloak
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: keycloak
    spec:
      automountServiceAccountToken: false
      containers:
        - name: {{ template "common.names.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }} 

          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- end }}

          {{- if .command }}
          command:
            {{- toYaml .command | nindent 16 }}
          {{- end }}
          args:
              - "--cache"
              - "local"
              - "--hostname"
              - "{{ tpl .Values.keycloakHostname . }}" 
              - "--import-realm"

          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}

          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- else if ne .Values.resourcesPreset "none" }}
          {{- end }}

          ports:
            - name: {{ .Values.containerPorts.name }}
              containerPort: {{ .Values.containerPorts.http }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe: {{- omit .Values.startupProbe "enabled" | toYaml | nindent 12 }}
            httpGet:
              path: {{ .Values.startupProbe.httpGet.path}}
              port: {{ .Values.startupProbe.httpGet.port}}
          {{- end }}
          livenessProbe: {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
          readinessProbe: {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
          env:
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default .Values.auth.existingSecret .Values.auth.name }}
                  key: admin-password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ default .Values.auth.existingSecret .Values.auth.name }}
                  key: db-host
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default .Values.auth.existingSecret .Values.auth.name }}
                  key: db-password
            - name: KC_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ default .Values.auth.existingSecret .Values.auth.name }}
                  key: keycloak-clientSecret
            - name: KC_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ default .Values.auth.existingSecret .Values.auth.name }}
                  key: keycloak-adminSecret
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ default .Values.auth.existingSecret .Values.auth.name }}
                  key: db-username
            # this is extra added
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  {{- if .Values.auth.existingSecret }}
                  name: {{ .Values.auth.existingSecret }}
                  {{- end }}
                  {{- if not .Values.auth.existingSecret }}
                  name: {{ .Values.auth.name }}
                  {{- end }}
                  key:  admin-user
            - name: KC_PROXY
              value: "edge"
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ template "common.names.name" . }}
                  key: DB_NAME
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ default .Values.auth.existingSecret .Values.auth.name }}
                  key: db-username
            - name: KC_DB_URL
              value: "jdbc:postgresql://$(DB_HOST)/$(DB_NAME)"
            - name: KC_ROOT_URL
              value: "https://{{ .Values.frontendHostname }}"
            {{- if .Values.extraEnvVars }}
            {{ toYaml .Values.extraEnvVars | nindent 12 }}
            {{- end }}
          # envFrom:
          #   - configMapRef:
          #       name: {{ template "common.names.name" . }}
          volumeMounts:
            - mountPath: "/opt/keycloak/data/import"
              name: realm-config
              readOnly: true
      restartPolicy: {{ default "Always" .Values.restartPolicy }}
      volumes:
        - name: realm-config
          configMap:
            name: {{ .Values.realm.name }}
